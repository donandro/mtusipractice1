// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pillsservice/v1/pillsservice.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PillsServiceClient is the client API for PillsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PillsServiceClient interface {
	SearchPills(ctx context.Context, in *SearchPillsRequest, opts ...grpc.CallOption) (*SearchPillsResponse, error)
	GetPillById(ctx context.Context, in *GetPillByIdRequest, opts ...grpc.CallOption) (*GetPillByIdResponse, error)
}

type pillsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPillsServiceClient(cc grpc.ClientConnInterface) PillsServiceClient {
	return &pillsServiceClient{cc}
}

func (c *pillsServiceClient) SearchPills(ctx context.Context, in *SearchPillsRequest, opts ...grpc.CallOption) (*SearchPillsResponse, error) {
	out := new(SearchPillsResponse)
	err := c.cc.Invoke(ctx, "/pillsservice.v1.PillsService/SearchPills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pillsServiceClient) GetPillById(ctx context.Context, in *GetPillByIdRequest, opts ...grpc.CallOption) (*GetPillByIdResponse, error) {
	out := new(GetPillByIdResponse)
	err := c.cc.Invoke(ctx, "/pillsservice.v1.PillsService/GetPillById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PillsServiceServer is the server API for PillsService service.
// All implementations must embed UnimplementedPillsServiceServer
// for forward compatibility
type PillsServiceServer interface {
	SearchPills(context.Context, *SearchPillsRequest) (*SearchPillsResponse, error)
	GetPillById(context.Context, *GetPillByIdRequest) (*GetPillByIdResponse, error)
	mustEmbedUnimplementedPillsServiceServer()
}

// UnimplementedPillsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPillsServiceServer struct {
}

func (UnimplementedPillsServiceServer) SearchPills(context.Context, *SearchPillsRequest) (*SearchPillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPills not implemented")
}
func (UnimplementedPillsServiceServer) GetPillById(context.Context, *GetPillByIdRequest) (*GetPillByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPillById not implemented")
}
func (UnimplementedPillsServiceServer) mustEmbedUnimplementedPillsServiceServer() {}

// UnsafePillsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PillsServiceServer will
// result in compilation errors.
type UnsafePillsServiceServer interface {
	mustEmbedUnimplementedPillsServiceServer()
}

func RegisterPillsServiceServer(s grpc.ServiceRegistrar, srv PillsServiceServer) {
	s.RegisterService(&PillsService_ServiceDesc, srv)
}

func _PillsService_SearchPills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PillsServiceServer).SearchPills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pillsservice.v1.PillsService/SearchPills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PillsServiceServer).SearchPills(ctx, req.(*SearchPillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PillsService_GetPillById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPillByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PillsServiceServer).GetPillById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pillsservice.v1.PillsService/GetPillById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PillsServiceServer).GetPillById(ctx, req.(*GetPillByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PillsService_ServiceDesc is the grpc.ServiceDesc for PillsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PillsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pillsservice.v1.PillsService",
	HandlerType: (*PillsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchPills",
			Handler:    _PillsService_SearchPills_Handler,
		},
		{
			MethodName: "GetPillById",
			Handler:    _PillsService_GetPillById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pillsservice/v1/pillsservice.proto",
}
