// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pillsservice/v1/pillsservice.proto

package grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchPillsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPillsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPillsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPillsRequestMultiError, or nil if none found.
func (m *SearchPillsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPillsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SearchString

	if len(errors) > 0 {
		return SearchPillsRequestMultiError(errors)
	}

	return nil
}

// SearchPillsRequestMultiError is an error wrapping multiple validation errors
// returned by SearchPillsRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchPillsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPillsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPillsRequestMultiError) AllErrors() []error { return m }

// SearchPillsRequestValidationError is the validation error returned by
// SearchPillsRequest.Validate if the designated constraints aren't met.
type SearchPillsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPillsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPillsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPillsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPillsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPillsRequestValidationError) ErrorName() string {
	return "SearchPillsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPillsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPillsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPillsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPillsRequestValidationError{}

// Validate checks the field values on SearchPillsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPillsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPillsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPillsResponseMultiError, or nil if none found.
func (m *SearchPillsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPillsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPills() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchPillsResponseValidationError{
						field:  fmt.Sprintf("Pills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchPillsResponseValidationError{
						field:  fmt.Sprintf("Pills[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchPillsResponseValidationError{
					field:  fmt.Sprintf("Pills[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchPillsResponseMultiError(errors)
	}

	return nil
}

// SearchPillsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchPillsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchPillsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPillsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPillsResponseMultiError) AllErrors() []error { return m }

// SearchPillsResponseValidationError is the validation error returned by
// SearchPillsResponse.Validate if the designated constraints aren't met.
type SearchPillsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPillsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPillsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPillsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPillsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPillsResponseValidationError) ErrorName() string {
	return "SearchPillsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPillsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPillsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPillsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPillsResponseValidationError{}

// Validate checks the field values on GetPillByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPillByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPillByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPillByIdRequestMultiError, or nil if none found.
func (m *GetPillByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPillByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPillByIdRequestMultiError(errors)
	}

	return nil
}

// GetPillByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetPillByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPillByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPillByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPillByIdRequestMultiError) AllErrors() []error { return m }

// GetPillByIdRequestValidationError is the validation error returned by
// GetPillByIdRequest.Validate if the designated constraints aren't met.
type GetPillByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPillByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPillByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPillByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPillByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPillByIdRequestValidationError) ErrorName() string {
	return "GetPillByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPillByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPillByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPillByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPillByIdRequestValidationError{}

// Validate checks the field values on GetPillByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPillByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPillByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPillByIdResponseMultiError, or nil if none found.
func (m *GetPillByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPillByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPillByIdResponseValidationError{
					field:  "Pill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPillByIdResponseValidationError{
					field:  "Pill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPillByIdResponseValidationError{
				field:  "Pill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPillByIdResponseMultiError(errors)
	}

	return nil
}

// GetPillByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetPillByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPillByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPillByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPillByIdResponseMultiError) AllErrors() []error { return m }

// GetPillByIdResponseValidationError is the validation error returned by
// GetPillByIdResponse.Validate if the designated constraints aren't met.
type GetPillByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPillByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPillByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPillByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPillByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPillByIdResponseValidationError) ErrorName() string {
	return "GetPillByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPillByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPillByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPillByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPillByIdResponseValidationError{}

// Validate checks the field values on Pill with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pill with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PillMultiError, or nil if none found.
func (m *Pill) ValidateAll() error {
	return m.validate(true)
}

func (m *Pill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Dosage

	// no validation rules for Instruction

	if len(errors) > 0 {
		return PillMultiError(errors)
	}

	return nil
}

// PillMultiError is an error wrapping multiple validation errors returned by
// Pill.ValidateAll() if the designated constraints aren't met.
type PillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PillMultiError) AllErrors() []error { return m }

// PillValidationError is the validation error returned by Pill.Validate if the
// designated constraints aren't met.
type PillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PillValidationError) ErrorName() string { return "PillValidationError" }

// Error satisfies the builtin error interface
func (e PillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PillValidationError{}
