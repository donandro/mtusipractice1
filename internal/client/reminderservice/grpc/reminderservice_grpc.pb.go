// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: reminderservice/v1/reminderservice.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReminderServiceClient is the client API for ReminderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderServiceClient interface {
	AddPlan(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error)
	GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...grpc.CallOption) (*GetUserPlansResponse, error)
	DeleteUserPlan(ctx context.Context, in *DeleteUserPlanRequest, opts ...grpc.CallOption) (*DeleteUserPlanResponse, error)
	CancelPlan(ctx context.Context, in *CancelPlanRequest, opts ...grpc.CallOption) (*CancelPlanResponse, error)
	Intake(ctx context.Context, in *IntakeRequest, opts ...grpc.CallOption) (*IntakeResponse, error)
}

type reminderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderServiceClient(cc grpc.ClientConnInterface) ReminderServiceClient {
	return &reminderServiceClient{cc}
}

func (c *reminderServiceClient) AddPlan(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error) {
	out := new(AddPlanResponse)
	err := c.cc.Invoke(ctx, "/reminderservice.v1.ReminderService/AddPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...grpc.CallOption) (*GetUserPlansResponse, error) {
	out := new(GetUserPlansResponse)
	err := c.cc.Invoke(ctx, "/reminderservice.v1.ReminderService/GetUserPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) DeleteUserPlan(ctx context.Context, in *DeleteUserPlanRequest, opts ...grpc.CallOption) (*DeleteUserPlanResponse, error) {
	out := new(DeleteUserPlanResponse)
	err := c.cc.Invoke(ctx, "/reminderservice.v1.ReminderService/DeleteUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) CancelPlan(ctx context.Context, in *CancelPlanRequest, opts ...grpc.CallOption) (*CancelPlanResponse, error) {
	out := new(CancelPlanResponse)
	err := c.cc.Invoke(ctx, "/reminderservice.v1.ReminderService/CancelPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) Intake(ctx context.Context, in *IntakeRequest, opts ...grpc.CallOption) (*IntakeResponse, error) {
	out := new(IntakeResponse)
	err := c.cc.Invoke(ctx, "/reminderservice.v1.ReminderService/Intake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderServiceServer is the server API for ReminderService service.
// All implementations must embed UnimplementedReminderServiceServer
// for forward compatibility
type ReminderServiceServer interface {
	AddPlan(context.Context, *AddPlanRequest) (*AddPlanResponse, error)
	GetUserPlans(context.Context, *GetUserPlansRequest) (*GetUserPlansResponse, error)
	DeleteUserPlan(context.Context, *DeleteUserPlanRequest) (*DeleteUserPlanResponse, error)
	CancelPlan(context.Context, *CancelPlanRequest) (*CancelPlanResponse, error)
	Intake(context.Context, *IntakeRequest) (*IntakeResponse, error)
	mustEmbedUnimplementedReminderServiceServer()
}

// UnimplementedReminderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReminderServiceServer struct {
}

func (UnimplementedReminderServiceServer) AddPlan(context.Context, *AddPlanRequest) (*AddPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlan not implemented")
}
func (UnimplementedReminderServiceServer) GetUserPlans(context.Context, *GetUserPlansRequest) (*GetUserPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPlans not implemented")
}
func (UnimplementedReminderServiceServer) DeleteUserPlan(context.Context, *DeleteUserPlanRequest) (*DeleteUserPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPlan not implemented")
}
func (UnimplementedReminderServiceServer) CancelPlan(context.Context, *CancelPlanRequest) (*CancelPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPlan not implemented")
}
func (UnimplementedReminderServiceServer) Intake(context.Context, *IntakeRequest) (*IntakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Intake not implemented")
}
func (UnimplementedReminderServiceServer) mustEmbedUnimplementedReminderServiceServer() {}

// UnsafeReminderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderServiceServer will
// result in compilation errors.
type UnsafeReminderServiceServer interface {
	mustEmbedUnimplementedReminderServiceServer()
}

func RegisterReminderServiceServer(s grpc.ServiceRegistrar, srv ReminderServiceServer) {
	s.RegisterService(&ReminderService_ServiceDesc, srv)
}

func _ReminderService_AddPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).AddPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminderservice.v1.ReminderService/AddPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).AddPlan(ctx, req.(*AddPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_GetUserPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).GetUserPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminderservice.v1.ReminderService/GetUserPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).GetUserPlans(ctx, req.(*GetUserPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_DeleteUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).DeleteUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminderservice.v1.ReminderService/DeleteUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).DeleteUserPlan(ctx, req.(*DeleteUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_CancelPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).CancelPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminderservice.v1.ReminderService/CancelPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).CancelPlan(ctx, req.(*CancelPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_Intake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).Intake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminderservice.v1.ReminderService/Intake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).Intake(ctx, req.(*IntakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReminderService_ServiceDesc is the grpc.ServiceDesc for ReminderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReminderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reminderservice.v1.ReminderService",
	HandlerType: (*ReminderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlan",
			Handler:    _ReminderService_AddPlan_Handler,
		},
		{
			MethodName: "GetUserPlans",
			Handler:    _ReminderService_GetUserPlans_Handler,
		},
		{
			MethodName: "DeleteUserPlan",
			Handler:    _ReminderService_DeleteUserPlan_Handler,
		},
		{
			MethodName: "CancelPlan",
			Handler:    _ReminderService_CancelPlan_Handler,
		},
		{
			MethodName: "Intake",
			Handler:    _ReminderService_Intake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminderservice/v1/reminderservice.proto",
}
