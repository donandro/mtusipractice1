// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: reminderservice/v1/reminderservice.proto

package grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddPlanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddPlanRequestMultiError,
// or nil if none found.
func (m *AddPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for PillId

	// no validation rules for ReminderTime

	// no validation rules for Frequency

	// no validation rules for DaysOfWeek

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return AddPlanRequestMultiError(errors)
	}

	return nil
}

// AddPlanRequestMultiError is an error wrapping multiple validation errors
// returned by AddPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type AddPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPlanRequestMultiError) AllErrors() []error { return m }

// AddPlanRequestValidationError is the validation error returned by
// AddPlanRequest.Validate if the designated constraints aren't met.
type AddPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPlanRequestValidationError) ErrorName() string { return "AddPlanRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPlanRequestValidationError{}

// Validate checks the field values on AddPlanResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPlanResponseMultiError, or nil if none found.
func (m *AddPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddPlanResponseMultiError(errors)
	}

	return nil
}

// AddPlanResponseMultiError is an error wrapping multiple validation errors
// returned by AddPlanResponse.ValidateAll() if the designated constraints
// aren't met.
type AddPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPlanResponseMultiError) AllErrors() []error { return m }

// AddPlanResponseValidationError is the validation error returned by
// AddPlanResponse.Validate if the designated constraints aren't met.
type AddPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPlanResponseValidationError) ErrorName() string { return "AddPlanResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPlanResponseValidationError{}

// Validate checks the field values on GetUserPlansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPlansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPlansRequestMultiError, or nil if none found.
func (m *GetUserPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserPlansRequestMultiError(errors)
	}

	return nil
}

// GetUserPlansRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserPlansRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPlansRequestMultiError) AllErrors() []error { return m }

// GetUserPlansRequestValidationError is the validation error returned by
// GetUserPlansRequest.Validate if the designated constraints aren't met.
type GetUserPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPlansRequestValidationError) ErrorName() string {
	return "GetUserPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPlansRequestValidationError{}

// Validate checks the field values on GetUserPlansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPlansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPlansResponseMultiError, or nil if none found.
func (m *GetUserPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPlansResponseValidationError{
						field:  fmt.Sprintf("UserPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPlansResponseValidationError{
						field:  fmt.Sprintf("UserPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPlansResponseValidationError{
					field:  fmt.Sprintf("UserPlans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPlansResponseMultiError(errors)
	}

	return nil
}

// GetUserPlansResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserPlansResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPlansResponseMultiError) AllErrors() []error { return m }

// GetUserPlansResponseValidationError is the validation error returned by
// GetUserPlansResponse.Validate if the designated constraints aren't met.
type GetUserPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPlansResponseValidationError) ErrorName() string {
	return "GetUserPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPlansResponseValidationError{}

// Validate checks the field values on UserPlan with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPlan with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPlanMultiError, or nil
// if none found.
func (m *UserPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	// no validation rules for Name

	// no validation rules for PillId

	// no validation rules for ReminderTime

	// no validation rules for Frequency

	// no validation rules for DaysOfWeek

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return UserPlanMultiError(errors)
	}

	return nil
}

// UserPlanMultiError is an error wrapping multiple validation errors returned
// by UserPlan.ValidateAll() if the designated constraints aren't met.
type UserPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPlanMultiError) AllErrors() []error { return m }

// UserPlanValidationError is the validation error returned by
// UserPlan.Validate if the designated constraints aren't met.
type UserPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPlanValidationError) ErrorName() string { return "UserPlanValidationError" }

// Error satisfies the builtin error interface
func (e UserPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPlanValidationError{}

// Validate checks the field values on DeleteUserPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserPlanRequestMultiError, or nil if none found.
func (m *DeleteUserPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	if len(errors) > 0 {
		return DeleteUserPlanRequestMultiError(errors)
	}

	return nil
}

// DeleteUserPlanRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPlanRequestMultiError) AllErrors() []error { return m }

// DeleteUserPlanRequestValidationError is the validation error returned by
// DeleteUserPlanRequest.Validate if the designated constraints aren't met.
type DeleteUserPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPlanRequestValidationError) ErrorName() string {
	return "DeleteUserPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPlanRequestValidationError{}

// Validate checks the field values on DeleteUserPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserPlanResponseMultiError, or nil if none found.
func (m *DeleteUserPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserPlanResponseMultiError(errors)
	}

	return nil
}

// DeleteUserPlanResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPlanResponseMultiError) AllErrors() []error { return m }

// DeleteUserPlanResponseValidationError is the validation error returned by
// DeleteUserPlanResponse.Validate if the designated constraints aren't met.
type DeleteUserPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPlanResponseValidationError) ErrorName() string {
	return "DeleteUserPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPlanResponseValidationError{}

// Validate checks the field values on IntakeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntakeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntakeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntakeRequestMultiError, or
// nil if none found.
func (m *IntakeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntakeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	// no validation rules for PillTaken

	if len(errors) > 0 {
		return IntakeRequestMultiError(errors)
	}

	return nil
}

// IntakeRequestMultiError is an error wrapping multiple validation errors
// returned by IntakeRequest.ValidateAll() if the designated constraints
// aren't met.
type IntakeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntakeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntakeRequestMultiError) AllErrors() []error { return m }

// IntakeRequestValidationError is the validation error returned by
// IntakeRequest.Validate if the designated constraints aren't met.
type IntakeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntakeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntakeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntakeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntakeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntakeRequestValidationError) ErrorName() string { return "IntakeRequestValidationError" }

// Error satisfies the builtin error interface
func (e IntakeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntakeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntakeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntakeRequestValidationError{}

// Validate checks the field values on IntakeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntakeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntakeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntakeResponseMultiError,
// or nil if none found.
func (m *IntakeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntakeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntakeResponseMultiError(errors)
	}

	return nil
}

// IntakeResponseMultiError is an error wrapping multiple validation errors
// returned by IntakeResponse.ValidateAll() if the designated constraints
// aren't met.
type IntakeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntakeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntakeResponseMultiError) AllErrors() []error { return m }

// IntakeResponseValidationError is the validation error returned by
// IntakeResponse.Validate if the designated constraints aren't met.
type IntakeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntakeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntakeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntakeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntakeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntakeResponseValidationError) ErrorName() string { return "IntakeResponseValidationError" }

// Error satisfies the builtin error interface
func (e IntakeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntakeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntakeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntakeResponseValidationError{}

// Validate checks the field values on CancelPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelPlanRequestMultiError, or nil if none found.
func (m *CancelPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	if len(errors) > 0 {
		return CancelPlanRequestMultiError(errors)
	}

	return nil
}

// CancelPlanRequestMultiError is an error wrapping multiple validation errors
// returned by CancelPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPlanRequestMultiError) AllErrors() []error { return m }

// CancelPlanRequestValidationError is the validation error returned by
// CancelPlanRequest.Validate if the designated constraints aren't met.
type CancelPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPlanRequestValidationError) ErrorName() string {
	return "CancelPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPlanRequestValidationError{}

// Validate checks the field values on CancelPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelPlanResponseMultiError, or nil if none found.
func (m *CancelPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelPlanResponseMultiError(errors)
	}

	return nil
}

// CancelPlanResponseMultiError is an error wrapping multiple validation errors
// returned by CancelPlanResponse.ValidateAll() if the designated constraints
// aren't met.
type CancelPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPlanResponseMultiError) AllErrors() []error { return m }

// CancelPlanResponseValidationError is the validation error returned by
// CancelPlanResponse.Validate if the designated constraints aren't met.
type CancelPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPlanResponseValidationError) ErrorName() string {
	return "CancelPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPlanResponseValidationError{}
